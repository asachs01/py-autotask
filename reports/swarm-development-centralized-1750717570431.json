{
  "objective": "TASK: Continue py-autotask Phase 6 Entity Expansion - Week 4: Project Management & Workflow\n\nSTATUS: Week 3 COMPLETED (21/50 entities done). Week 4 IN PROGRESS (0/10 entities).\n\nCOMPLETED: Financial (5), HR/Resource Mgmt (6), Service Delivery/Operations (10)\n\nWEEK 4 TARGETS (10 entities):\n1. ProjectPhasesEntity - project phase mgmt & milestone tracking\n2. ProjectMilestonesEntity - key achievement & deadline tracking  \n3. AllocationCodesEntity - resource allocation & time categorization\n4. HolidaySetsEntity - holiday calendar mgmt for resource planning\n5. WorkflowRulesEntity - workflow automation rules & triggers\n6. ProjectTemplatesEntity - project template mgmt & instantiation\n7. ResourceAllocationEntity - resource assignment & capacity planning\n8. ProjectBudgetsEntity - project budget tracking & variance analysis\n9. TaskDependenciesEntity - task relationship & dependency mgmt\n10. ProjectReportsEntity - project reporting & analytics framework\n\nIMPLEMENTATION STANDARDS:\n- Inherit from BaseEntity (see py_autotask/entities/base.py)\n- 10-15 business methods per entity beyond CRUD\n- Full docstrings, type hints (Dict, List, Optional, Any, Union)\n- Use Decimal for financial calcs, datetime imports\n- Include: create_*, get_*, activate_*, deactivate_*, clone_*, get_*_summary(), bulk_*\n- File location: py_autotask/entities/[entity_name].py\n\nTEMPLATE:\n```python\n\"\"\"\nEntityName Entity for py-autotask\n\nBrief description of entity purpose and business value.\n\"\"\"\n\nfrom decimal import Decimal\nfrom typing import Dict, List, Optional, Any, Union\nfrom datetime import datetime, date\nfrom .base import BaseEntity\n\nclass EntityNameEntity(BaseEntity):\n    \"\"\"Manages Autotask EntityName - brief description.\"\"\"\n    entity_name = \"EntityName\"\n    \n    def create_entity(self, ...): \"\"\"Create with business logic.\"\"\"\n    def get_entities_by_status(self, ...): \"\"\"Get by status.\"\"\"\n    def activate_entity(self, ...): \"\"\"Activate entity.\"\"\"\n    # ... 10-15 more business methods\n```\n\nINTEGRATION REQUIRED:\n1. Add to py_autotask/entities/__init__.py:\n   - Import: from .entity_name import EntityNameEntity\n   - Export: \"EntityNameEntity\" in __all__\n2. Add to py_autotask/entities/manager.py:\n   - Property: @property def entity_name(self) -> EntityNameEntity\n3. Test: python -c \"from py_autotask.entities import EntityNameEntity; print(OK)\"\n\nEXAMINE PATTERNS: Check existing entities like WorkflowsEntity, SubscriptionsEntity, ProductsEntity for implementation patterns.\n\nTARGET: ~380+ lines per entity, total ~3800+ lines for Week 4.\n\nREFERENCES: plans/PHASE_6_ENTITY_EXPANSION_PLAN.md, CHANGELOG.md, existing entity files.\n\nSTART WITH: AllocationCodesEntity or HolidaySetsEntity (simpler), then ProjectPhasesEntity, ProjectTemplatesEntity (complex).\n\nCRITICAL: Maintain quality standards from Weeks 1-3. Each entity needs comprehensive business methods, proper error handling, bulk operations.",
  "strategy": "development",
  "mode": "centralized",
  "maxAgents": 5,
  "timeout": 60,
  "parallel": true,
  "monitor": false,
  "output": "json",
  "outputDir": "./reports",
  "timestamp": "2025-06-23T22:26:10.427Z",
  "id": "swarm-development-centralized-1750717570431"
}